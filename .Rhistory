for(n in 1:100) {
filename <- system.file("extdata", "PATIENT_DATA_oncoprint.tsv",
package = "ZMIZ1")
survival <- data.frame(t(read.csv(filename, sep = "\t")),
stringsAsFactors = FALSE)
survival <- survival[-1:-2, ]
selected_rows <- sample(nrow(survival), size=200, replace =FALSE)
survival<-survival[selected_rows,]
survival[, 5] <- as.numeric(survival[ , 5])
colnames(survival)[5] <- "time"
colnames(survival)[6] <- "status"
colnames(survival)[4] <- "ER"
colnames(survival)[12] <- "Expression"
survivalFiltered <- survival[survival$ER == "Positive", ]
survivalFiltered <- survivalFiltered[!is.na(survivalFiltered$status ==
""), ]
survivalFiltered[survivalFiltered$status == "LIVING", ]$status <- "0"
survivalFiltered[survivalFiltered$status == "DECEASED", ]$status <- "1"
survivalFiltered$status <- as.numeric(survivalFiltered$status)
survivalFiltered$Expression <- as.numeric(survivalFiltered$Expression)
res.cut <- surv_cutpoint(survivalFiltered, time = "time",
event = "status", "Expression", minprop = 0.1, progressbar = TRUE)
summary(res.cut)
plot(res.cut, "Expression", palette = "npg")
res.cat <- surv_categorize(res.cut)
head(res.cat)
fit <- survfit(Surv(time, status) ~ Expression, data = res.cat)
p <- ggsurvplot(fit, data = res.cat, risk.table = TRUE, conf.int = TRUE)
p
summary(fit)
pvalues<-cbind(pvalues,surv_pvalue(fit)$pval)
}
sum(pvalues < 0.05)
library(ZMIZ1)
library(survminer)
library(survival)
pvalues<-vector()
for(n in 1:100) {
filename <- system.file("extdata", "PATIENT_DATA_oncoprint.tsv",
package = "ZMIZ1")
survival <- data.frame(t(read.csv(filename, sep = "\t")),
stringsAsFactors = FALSE)
survival <- survival[-1:-2, ]
selected_rows <- sample(nrow(survival), size=200, replace =FALSE)
survival<-survival[selected_rows,]
survival[, 5] <- as.numeric(survival[ , 5])
colnames(survival)[5] <- "time"
colnames(survival)[6] <- "status"
colnames(survival)[4] <- "ER"
colnames(survival)[12] <- "Expression"
survivalFiltered <- survival[survival$ER == "Positive", ]
survivalFiltered <- survivalFiltered[!is.na(survivalFiltered$status ==
""), ]
survivalFiltered[survivalFiltered$status == "LIVING", ]$status <- "0"
survivalFiltered[survivalFiltered$status == "DECEASED", ]$status <- "1"
survivalFiltered$status <- as.numeric(survivalFiltered$status)
survivalFiltered$Expression <- as.numeric(survivalFiltered$Expression)
res.cut <- surv_cutpoint(survivalFiltered, time = "time",
event = "status", "Expression", minprop = 0.1, progressbar = TRUE)
summary(res.cut)
plot(res.cut, "Expression", palette = "npg")
res.cat <- surv_categorize(res.cut)
head(res.cat)
fit <- survfit(Surv(time, status) ~ Expression, data = res.cat)
p <- ggsurvplot(fit, data = res.cat, risk.table = TRUE, conf.int = TRUE)
p
summary(fit)
pvalues<-cbind(pvalues,surv_pvalue(fit)$pval)
}
sum(pvalues < 0.05)
library(ZMIZ1)
library(survminer)
library(survival)
pvalues<-vector()
for(n in 1:100) {
filename <- system.file("extdata", "PATIENT_DATA_oncoprint.tsv",
package = "ZMIZ1")
survival <- data.frame(t(read.csv(filename, sep = "\t")),
stringsAsFactors = FALSE)
survival <- survival[-1:-2, ]
selected_rows <- sample(nrow(survival), size=200, replace =FALSE)
survival<-survival[selected_rows,]
survival[, 5] <- as.numeric(survival[ , 5])
colnames(survival)[5] <- "time"
colnames(survival)[6] <- "status"
colnames(survival)[4] <- "ER"
colnames(survival)[12] <- "Expression"
survivalFiltered <- survival[survival$ER == "Positive", ]
survivalFiltered <- survivalFiltered[!is.na(survivalFiltered$status ==
""), ]
survivalFiltered[survivalFiltered$status == "LIVING", ]$status <- "0"
survivalFiltered[survivalFiltered$status == "DECEASED", ]$status <- "1"
survivalFiltered$status <- as.numeric(survivalFiltered$status)
survivalFiltered$Expression <- as.numeric(survivalFiltered$Expression)
res.cut <- surv_cutpoint(survivalFiltered, time = "time",
event = "status", "Expression", minprop = 0.1, progressbar = TRUE)
summary(res.cut)
plot(res.cut, "Expression", palette = "npg")
res.cat <- surv_categorize(res.cut)
head(res.cat)
fit <- survfit(Surv(time, status) ~ Expression, data = res.cat)
p <- ggsurvplot(fit, data = res.cat, risk.table = TRUE, conf.int = TRUE)
p
summary(fit)
pvalues<-cbind(pvalues,surv_pvalue(fit)$pval)
}
sum(pvalues < 0.05)
library(ZMIZ1)
library(survminer)
library(survival)
pvalues<-vector()
for(n in 1:100) {
filename <- system.file("extdata", "PATIENT_DATA_oncoprint.tsv",
package = "ZMIZ1")
survival <- data.frame(t(read.csv(filename, sep = "\t")),
stringsAsFactors = FALSE)
survival <- survival[-1:-2, ]
selected_rows <- sample(nrow(survival), size=300, replace =FALSE)
survival<-survival[selected_rows,]
survival[, 5] <- as.numeric(survival[ , 5])
colnames(survival)[5] <- "time"
colnames(survival)[6] <- "status"
colnames(survival)[4] <- "ER"
colnames(survival)[12] <- "Expression"
survivalFiltered <- survival[survival$ER == "Positive", ]
survivalFiltered <- survivalFiltered[!is.na(survivalFiltered$status ==
""), ]
survivalFiltered[survivalFiltered$status == "LIVING", ]$status <- "0"
survivalFiltered[survivalFiltered$status == "DECEASED", ]$status <- "1"
survivalFiltered$status <- as.numeric(survivalFiltered$status)
survivalFiltered$Expression <- as.numeric(survivalFiltered$Expression)
res.cut <- surv_cutpoint(survivalFiltered, time = "time",
event = "status", "Expression", minprop = 0.1, progressbar = TRUE)
summary(res.cut)
plot(res.cut, "Expression", palette = "npg")
res.cat <- surv_categorize(res.cut)
head(res.cat)
fit <- survfit(Surv(time, status) ~ Expression, data = res.cat)
p <- ggsurvplot(fit, data = res.cat, risk.table = TRUE, conf.int = TRUE)
p
summary(fit)
pvalues<-cbind(pvalues,surv_pvalue(fit)$pval)
}
sum(pvalues < 0.05)
library(ZMIZ1)
library(survminer)
library(survival)
pvalues<-vector()
for(n in 1:100) {
filename <- system.file("extdata", "PATIENT_DATA_oncoprint.tsv",
package = "ZMIZ1")
survival <- data.frame(t(read.csv(filename, sep = "\t")),
stringsAsFactors = FALSE)
survival <- survival[-1:-2, ]
selected_rows <- sample(nrow(survival), size=400, replace =FALSE)
survival<-survival[selected_rows,]
survival[, 5] <- as.numeric(survival[ , 5])
colnames(survival)[5] <- "time"
colnames(survival)[6] <- "status"
colnames(survival)[4] <- "ER"
colnames(survival)[12] <- "Expression"
survivalFiltered <- survival[survival$ER == "Positive", ]
survivalFiltered <- survivalFiltered[!is.na(survivalFiltered$status ==
""), ]
survivalFiltered[survivalFiltered$status == "LIVING", ]$status <- "0"
survivalFiltered[survivalFiltered$status == "DECEASED", ]$status <- "1"
survivalFiltered$status <- as.numeric(survivalFiltered$status)
survivalFiltered$Expression <- as.numeric(survivalFiltered$Expression)
res.cut <- surv_cutpoint(survivalFiltered, time = "time",
event = "status", "Expression", minprop = 0.1, progressbar = TRUE)
summary(res.cut)
plot(res.cut, "Expression", palette = "npg")
res.cat <- surv_categorize(res.cut)
head(res.cat)
fit <- survfit(Surv(time, status) ~ Expression, data = res.cat)
p <- ggsurvplot(fit, data = res.cat, risk.table = TRUE, conf.int = TRUE)
p
summary(fit)
pvalues<-cbind(pvalues,surv_pvalue(fit)$pval)
}
sum(pvalues < 0.05)
library(ZMIZ1)
library(survminer)
library(survival)
pvalues<-vector()
for(n in 1:1000) {
filename <- system.file("extdata", "PATIENT_DATA_oncoprint.tsv",
package = "ZMIZ1")
survival <- data.frame(t(read.csv(filename, sep = "\t")),
stringsAsFactors = FALSE)
survival <- survival[-1:-2, ]
selected_rows <- sample(nrow(survival), size=400, replace =FALSE)
survival<-survival[selected_rows,]
survival[, 5] <- as.numeric(survival[ , 5])
colnames(survival)[5] <- "time"
colnames(survival)[6] <- "status"
colnames(survival)[4] <- "ER"
colnames(survival)[12] <- "Expression"
survivalFiltered <- survival[survival$ER == "Positive", ]
survivalFiltered <- survivalFiltered[!is.na(survivalFiltered$status ==
""), ]
survivalFiltered[survivalFiltered$status == "LIVING", ]$status <- "0"
survivalFiltered[survivalFiltered$status == "DECEASED", ]$status <- "1"
survivalFiltered$status <- as.numeric(survivalFiltered$status)
survivalFiltered$Expression <- as.numeric(survivalFiltered$Expression)
res.cut <- surv_cutpoint(survivalFiltered, time = "time",
event = "status", "Expression", minprop = 0.1, progressbar = TRUE)
summary(res.cut)
plot(res.cut, "Expression", palette = "npg")
res.cat <- surv_categorize(res.cut)
head(res.cat)
fit <- survfit(Surv(time, status) ~ Expression, data = res.cat)
p <- ggsurvplot(fit, data = res.cat, risk.table = TRUE, conf.int = TRUE)
p
summary(fit)
pvalues<-cbind(pvalues,surv_pvalue(fit)$pval)
}
sum(pvalues < 0.05)
library(DeSeq2)
library('DeSeq2)
'
library('DeSeq2')
library('DESeq2')
?DESeq
setwd("~/Desktop/Informatics/RNASeq-SCN5A")
#Useful MSigDB (From ZMIZ1 package)
library(org.Hs.eg.db)
library(vulcan)
library(ZMIZ1)
#Load Data
res<-readRDS("007_res.RDS")
# Load necessary libraries
library(DESeq2)
library(ggplot2)
library(dplyr)
library(ggrepel)
# Convert the DESeq2 results object to a data frame
res_df <- as.data.frame(res)
# Add gene names and row names (entrez IDs)
res_df$gene_name <- mapIds(org.Hs.eg.db, keys=row.names(res_df), column="SYMBOL", keytype="ENTREZID", multiVals="first")
res_df$entrez_id <- row.names(res_df)
#Load MSigDB genes
SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_UP <- msigdb[["c2_cgp;_;SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_UP"]]
# Define the MSigDB gene list "SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_UP"
msigdb_genes <- c(SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_UP) # Replace with the actual gene symbols
# Mark the genes from the MSigDB gene list in a new column
res_df$in_msigdb <- res_df$entrez_id %in% msigdb_genes
# Add a column to identify SCN5A
res_df$SCN5A <- res_df$gene_name == "SCN5A"
# Sort the data frame by adjusted p-value and select the top 10 genes
top_genes <- res_df %>% arrange( padj ) %>% head(15)
# Create the volcano plot
volcano_plot <- ggplot() +
geom_point(data=res_df[!res_df$in_msigdb & !res_df$SCN5A,], aes(x=log2FoldChange, y=-log10(padj), color="Others"), alpha=0.6) +
geom_point(data=res_df[res_df$in_msigdb,], aes(x=log2FoldChange, y=-log10(padj), color="MSigDB"), alpha=0.6) +
geom_point(data=res_df[res_df$SCN5A,], aes(x=log2FoldChange, y=-log10(padj), color="SCN5A"), alpha=0.6) +
geom_text_repel(show.legend = FALSE, data=top_genes, aes(x=log2FoldChange, y=-log10(padj), label=gene_name, color=factor(ifelse(in_msigdb, "MSigDB", ifelse(SCN5A, "SCN5A", "OthersText")))), size=4, box.padding=0.2) +
scale_color_manual(values=c("Others" = "gray", "MSigDB" = "blue", "SCN5A" = "red", "OthersText" = "black"), labels = c("MSigDB Gene Set", "SCN5A"), breaks = c("MSigDB", "SCN5A")) +
labs(title="RNA-seq expression changes in response to SCN5a shRNA knockdown ",
x="log2 fold change",
y="-log10 adjusted p-value") +
theme_minimal() +
guides(color = guide_legend(title = "Key"))
# Show the plot
volcano_plot
#
pval_to_asterisk_R <- function(pval) {
if (pval > 0.05) {
return(" ")
} else if (pval <= 0.05 & pval > 0.01) {
return("*   ")
} else if (pval <= 0.01 & pval > 0.001) {
return("**  ")
} else if (pval <= 0.001 & pval > 0.0001) {
return("*** ")
} else {
return("****")
}
}
pval_to_asterisk_L <- function(pval) {
if (pval > 0.05) {
return(" ")
} else if (pval <= 0.05 & pval > 0.01) {
return("   *")
} else if (pval <= 0.01 & pval > 0.001) {
return("  **")
} else if (pval <= 0.001 & pval > 0.0001) {
return(" ***")
} else {
return("****")
}
}
# Add a new column with the asterisk notation for p-values in res_df
res_df <- res_df %>%
mutate(pval_asterisk_L = sapply(padj, pval_to_asterisk_L))
res_df <- res_df %>%
mutate(pval_asterisk_R = sapply(padj, pval_to_asterisk_R))
#Create top 20 gene plots
top_genes_up <- res_df %>% arrange(desc(log2FoldChange)) %>% head(20)
top_genes_down <- res_df %>% arrange(log2FoldChange) %>% head(20)
top20_genes <- rbind(top_genes_up, top_genes_down)
# Create a ggplot object for genes with increased fold change
increased_fc_plot <- ggplot(data = top_genes_up, aes(x = log2FoldChange, y = reorder(gene_name, log2FoldChange), fill = factor(ifelse(in_msigdb, "MSigDB", ifelse(SCN5A, "SCN5A", "Others"))))) +
geom_col() +
scale_fill_manual(values = c("Others" = "black", "MSigDB" = "blue", "SCN5A" = "red")) +
geom_text(data=top_genes_up, aes(x = log2FoldChange, y = reorder(gene_name, log2FoldChange), label = pval_asterisk_L, vjust = 0.8, hjust=1.3,size=10, color="white")) +
labs(title = "Increased expression (Top 20)",
x = "log2 fold change",
y = "Gene name") +
scale_color_identity() +
theme_minimal() +
theme(legend.position = "none", plot.title = element_text(hjust = -0.2))
# Create a ggplot object for genes with decreased fold change
decreased_fc_plot <- ggplot(data = top_genes_down, aes(x = log2FoldChange, y = reorder(gene_name, log2FoldChange), fill = factor(ifelse(in_msigdb, "MSigDB", ifelse(SCN5A, "SCN5A", "Others"))))) +
geom_col() +
scale_fill_manual(values = c("Others" = "black", "MSigDB" = "blue", "SCN5A" = "red")) +
geom_text(data=top_genes_down, aes(x = log2FoldChange, y = reorder(gene_name, log2FoldChange), label = pval_asterisk_R, vjust = 0.8, hjust=-0.5,size=10, color="white")) +
labs(title = "Decreased expression (Top 20)",
x = "log2 fold change",
y = "Gene name") +
scale_color_identity() +
theme_minimal() +
theme(legend.position = "none", plot.title = element_text(hjust = -0.2))
# Show the plots
increased_fc_plot
decreased_fc_plot
library(cowplot)
# Combine the three plots using plot_grid() and label them A, B, and C
combined_plot <- plot_grid(
plot_grid(volcano_plot, NULL, ncol = 1, rel_heights = c(1, 0.05), labels = c("A", "")),
plot_grid(increased_fc_plot + theme(plot.title = element_text(hjust = -2.5)),
decreased_fc_plot + theme(plot.title = element_text(hjust = -2.3)), ncol = 2, labels = c("B", "C")),
ncol = 1, rel_heights = c(1, 1)
)
# Show the combined plot
combined_plot
#Plots GSEA
geneList<-res$log2FoldChange
names(geneList) <- rownames(res)
SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_UP <- msigdb[["c2_cgp;_;SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_UP"]]
obj <- gsea(sort(geneList, decreasing = TRUE), set = SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_UP,
method = "pareto")
plot_gsea(obj, bottomYtitle = "sh70c/ctrl", title = "SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_UP")
pdf("figures/008_FigA-C.pdf",width=8,heigh= 6)
combined_plot
dev.off()
pdf("figures/008_FigD.pdf",width=8,heigh= 4)
plot_gsea(obj, bottomYtitle = "sh70c/ctrl", title = "SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_UP")
dev.off()
#!/usr/bin/env Rscript
countMatrix<-readRDS(file='processed_data/countMatrix.RDS')$counts
countMatrix
cage=c("H228", "H228", "H210", "H178", "H210", "H240",
"H288", "H288", "H240", "H178", "H210", "H210")
coldata<-cbind(rep(1:6,2), c(rep('ctrl',6),rep('sh70c',6)),cage)
rownames(coldata)<-colnames(countMatrix)
colnames(coldata)<-c('rep','condition','cage')
#### DeSeq2 Analysis
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = countMatrix,
colData = coldata,
design = ~ cage + condition)
#Ensure that transcripts have at least 3 samples with a count of 10 or more.
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep,]
#Ensure control is Reference
dds$condition <- relevel(dds$condition, ref = "ctrl")
#Run!
dds <- DESeq(dds)
res <- results(dds)
res
saveRDS(res,file="007_res.RDS")
#### Suplimentary Plot
library(ggpubr)
#Check SCN5a counts
df<-data.frame(Counts=countMatrix['6331',],
Condition=c(rep('Control',6),
rep('shRNA SCN5a',6)),
Replicate=rep(1:6,2))
my_comparisons<-list(c('Control','shRNA SCN5a'))
SCN5aCounts<-ggboxplot(df, x='Condition',
y='Counts',
ylim=c(0,1750),
color='Condition',
add="jitter",
legend.title="Raw counts") +
ylab("SCN5a Counts") +
stat_compare_means(comparisons = my_comparisons) +
theme(legend.text=element_text(size=8),
legend.title=element_text(size=10))
#Check PCA corrected for cage.
vsd <- vst(dds, blind=FALSE)
mat <- assay(vsd)
mm <- model.matrix(~condition, colData(vsd))
mat <- limma::removeBatchEffect(mat, batch=vsd$cage, design=mm)
assay(vsd) <- mat
cagePlot<-plotPCA(vsd, intgroup="cage")+
ggtitle("PCA of samples coloured by cage")+
guides(color=guide_legend(title="Cage"))
condPlot<-plotPCA(vsd, intgroup="condition")+
ggtitle("PCA of sample coloured by condition")+
guides(color=guide_legend(title="Condition"))
#GSEA SCHUETZ Ductal Down
library(vulcan)
library(ZMIZ1) #from Andrew Holding's github
geneList<-res$log2FoldChange
names(geneList) <- rownames(res)
SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_DN <- msigdb[["c2_cgp;_;SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_DN"]]
obj <- gsea(sort(geneList, decreasing = TRUE), set = SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_DN,
method = "pareto")
gseaPlotDN<-""
pdf("figures/007_suppA-C.pdf",width=8,heigh= 5)
ggarrange(SCN5aCounts, condPlot, cagePlot,  gseaPlotDN,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
dev.off()
pdf("figures/007_suppD.pdf",width=8,heigh= 4)
plot_gsea(obj, bottomYtitle = "sh70c/ctrl", title = "SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_DN")
dev.off()
plot_gsea(obj, bottomYtitle = "sh70c/ctrl", title = "SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_DN")
ggarrange(SCN5aCounts, condPlot, cagePlot,  gseaPlotDN,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
cagePlot<-plotPCA(vsd, intgroup="cage")+
ggtitle("PCA of samples coloured by cage")+
guides(color=guide_legend(title="Cage"))
condPlot<-plotPCA(vsd, intgroup="condition")+
ggtitle("PCA of sample coloured by condition")+
guides(color=guide_legend(title="Condition"))
vsd
?plotPCA
condPlot
condPlot+theme_bw()
condPlot
condPlot+ scale_fill_discrete(labels=c('label1', 'label2')
condPlot+ scale_fill_discrete(labels=c('label1', 'label2')
condPlot + scale_fill_discrete(labels=c('label1', 'label2')
condPlot + scale_fill_discrete(labels=c('label1', 'label2'))
condPlot + scale_fill_discrete(labels=c('label1', 'label2'))
condPlot + scale_color_discrete(labels=c('label1', 'label2'))
condPlot + scale_color_discrete(labels=c('ctrl', 'shRNA SCN5a'))
#!/usr/bin/env Rscript
countMatrix<-readRDS(file='processed_data/countMatrix.RDS')$counts
countMatrix
cage=c("H228", "H228", "H210", "H178", "H210", "H240",
"H288", "H288", "H240", "H178", "H210", "H210")
coldata<-cbind(rep(1:6,2), c(rep('ctrl',6),rep('sh70c',6)),cage)
rownames(coldata)<-colnames(countMatrix)
colnames(coldata)<-c('rep','condition','cage')
#### DeSeq2 Analysis
library("DESeq2")
dds <- DESeqDataSetFromMatrix(countData = countMatrix,
colData = coldata,
design = ~ cage + condition)
#Ensure that transcripts have at least 3 samples with a count of 10 or more.
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep,]
#Ensure control is Reference
dds$condition <- relevel(dds$condition, ref = "ctrl")
#Run!
dds <- DESeq(dds)
res <- results(dds)
res
saveRDS(res,file="007_res.RDS")
#### Suplimentary Plot
library(ggpubr)
#Check SCN5a counts
df<-data.frame(Counts=countMatrix['6331',],
Condition=c(rep('Control',6),
rep('shRNA SCN5a',6)),
Replicate=rep(1:6,2))
my_comparisons<-list(c('Control','shRNA SCN5a'))
SCN5aCounts<-ggboxplot(df, x='Condition',
y='Counts',
ylim=c(0,1750),
color='Condition',
add="jitter",
legend.title="Raw counts") +
ylab("SCN5a Counts") +
stat_compare_means(comparisons = my_comparisons) +
theme(legend.text=element_text(size=8),
legend.title=element_text(size=10))
#Check PCA corrected for cage.
vsd <- vst(dds, blind=FALSE)
mat <- assay(vsd)
mm <- model.matrix(~condition, colData(vsd))
mat <- limma::removeBatchEffect(mat, batch=vsd$cage, design=mm)
assay(vsd) <- mat
cagePlot<-plotPCA(vsd, intgroup="cage")+
ggtitle("PCA of samples coloured by cage")+
guides(color=guide_legend(title="Cage"))
condPlot<-plotPCA(vsd, intgroup="condition")+
ggtitle("PCA of sample coloured by condition")+
guides(color=guide_legend(title="Condition"))
condPlot <- condPlot + scale_color_discrete(labels=c('ctrl', 'shRNA SCN5a'))
#GSEA SCHUETZ Ductal Down
library(vulcan)
library(ZMIZ1) #from Andrew Holding's github
geneList<-res$log2FoldChange
names(geneList) <- rownames(res)
SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_DN <- msigdb[["c2_cgp;_;SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_DN"]]
obj <- gsea(sort(geneList, decreasing = TRUE), set = SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_DN,
method = "pareto")
gseaPlotDN<-""
pdf("figures/007_suppA-C.pdf",width=8,heigh= 5)
ggarrange(SCN5aCounts, condPlot, cagePlot,  gseaPlotDN,
labels = c("A", "B", "C","D"),
ncol = 2, nrow = 2)
dev.off()
pdf("figures/007_suppD.pdf",width=8,heigh= 4)
plot_gsea(obj, bottomYtitle = "sh70c/ctrl", title = "SCHUETZ_BREAST_CANCER_DUCTAL_INVASIVE_DN")
dev.off()
